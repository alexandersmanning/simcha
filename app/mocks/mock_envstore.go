// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandersmanning/simcha/app/config (interfaces: EnvStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/alexandersmanning/simcha/app/models"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockEnvStore is a mock of EnvStore interface
type MockEnvStore struct {
	ctrl     *gomock.Controller
	recorder *MockEnvStoreMockRecorder
}

// MockEnvStoreMockRecorder is the mock recorder for MockEnvStore
type MockEnvStoreMockRecorder struct {
	mock *MockEnvStore
}

// NewMockEnvStore creates a new mock instance
func NewMockEnvStore(ctrl *gomock.Controller) *MockEnvStore {
	mock := &MockEnvStore{ctrl: ctrl}
	mock.recorder = &MockEnvStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvStore) EXPECT() *MockEnvStoreMockRecorder {
	return m.recorder
}

// CurrentUser mocks base method
func (m *MockEnvStore) CurrentUser(arg0 *http.Request) (*models.User, error) {
	ret := m.ctrl.Call(m, "CurrentUser", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUser indicates an expected call of CurrentUser
func (mr *MockEnvStoreMockRecorder) CurrentUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockEnvStore)(nil).CurrentUser), arg0)
}

// IsLoggedIn mocks base method
func (m *MockEnvStore) IsLoggedIn(arg0 *http.Request) (bool, error) {
	ret := m.ctrl.Call(m, "IsLoggedIn", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoggedIn indicates an expected call of IsLoggedIn
func (mr *MockEnvStoreMockRecorder) IsLoggedIn(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoggedIn", reflect.TypeOf((*MockEnvStore)(nil).IsLoggedIn), arg0)
}

// Login mocks base method
func (m *MockEnvStore) Login(arg0 *models.User, arg1 http.ResponseWriter, arg2 *http.Request) error {
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockEnvStoreMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockEnvStore)(nil).Login), arg0, arg1, arg2)
}

// Logout mocks base method
func (m *MockEnvStore) Logout(arg0 http.ResponseWriter, arg1 *http.Request) error {
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockEnvStoreMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockEnvStore)(nil).Logout), arg0, arg1)
}
