// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandersmanning/simcha/app/models (interfaces: UserAction)

// Package mockmodel is a generated GoMock package.
package mockmodel

import (
	models "github.com/alexandersmanning/simcha/app/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockUserAction is a mock of UserAction interface
type MockUserAction struct {
	ctrl     *gomock.Controller
	recorder *MockUserActionMockRecorder
}

// MockUserActionMockRecorder is the mock recorder for MockUserAction
type MockUserActionMockRecorder struct {
	mock *MockUserAction
}

// NewMockUserAction creates a new mock instance
func NewMockUserAction(ctrl *gomock.Controller) *MockUserAction {
	mock := &MockUserAction{ctrl: ctrl}
	mock.recorder = &MockUserActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserAction) EXPECT() *MockUserActionMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method
func (m *MockUserAction) ComparePassword(arg0 string) error {
	ret := m.ctrl.Call(m, "ComparePassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword
func (mr *MockUserActionMockRecorder) ComparePassword(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockUserAction)(nil).ComparePassword), arg0)
}

// CreateDigest mocks base method
func (m *MockUserAction) CreateDigest() (string, error) {
	ret := m.ctrl.Call(m, "CreateDigest")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDigest indicates an expected call of CreateDigest
func (mr *MockUserActionMockRecorder) CreateDigest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDigest", reflect.TypeOf((*MockUserAction)(nil).CreateDigest))
}

// SetDigest mocks base method
func (m *MockUserAction) SetDigest(arg0 string) {
	m.ctrl.Call(m, "SetDigest", arg0)
}

// SetDigest indicates an expected call of SetDigest
func (mr *MockUserActionMockRecorder) SetDigest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDigest", reflect.TypeOf((*MockUserAction)(nil).SetDigest), arg0)
}

// SetID mocks base method
func (m *MockUserAction) SetID(arg0 int) {
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID
func (mr *MockUserActionMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockUserAction)(nil).SetID), arg0)
}

// SetPassword mocks base method
func (m *MockUserAction) SetPassword(arg0, arg1 string) {
	m.ctrl.Call(m, "SetPassword", arg0, arg1)
}

// SetPassword indicates an expected call of SetPassword
func (mr *MockUserActionMockRecorder) SetPassword(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockUserAction)(nil).SetPassword), arg0, arg1)
}

// SetTimestamps mocks base method
func (m *MockUserAction) SetTimestamps() {
	m.ctrl.Call(m, "SetTimestamps")
}

// SetTimestamps indicates an expected call of SetTimestamps
func (mr *MockUserActionMockRecorder) SetTimestamps() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamps", reflect.TypeOf((*MockUserAction)(nil).SetTimestamps))
}

// Timestamps mocks base method
func (m *MockUserAction) Timestamps() (time.Time, time.Time) {
	ret := m.ctrl.Call(m, "Timestamps")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// Timestamps indicates an expected call of Timestamps
func (mr *MockUserActionMockRecorder) Timestamps() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamps", reflect.TypeOf((*MockUserAction)(nil).Timestamps))
}

// User mocks base method
func (m *MockUserAction) User() *models.User {
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(*models.User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockUserActionMockRecorder) User() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserAction)(nil).User))
}

// VerifyPassword mocks base method
func (m *MockUserAction) VerifyPassword() error {
	ret := m.ctrl.Call(m, "VerifyPassword")
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword
func (mr *MockUserActionMockRecorder) VerifyPassword() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockUserAction)(nil).VerifyPassword))
}
