// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandersmanning/simcha/app/models (interfaces: Datastore)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/alexandersmanning/simcha/app/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// AllPosts mocks base method
func (m *MockDatastore) AllPosts() ([]*models.Post, error) {
	ret := m.ctrl.Call(m, "AllPosts")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllPosts indicates an expected call of AllPosts
func (mr *MockDatastoreMockRecorder) AllPosts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllPosts", reflect.TypeOf((*MockDatastore)(nil).AllPosts))
}

// CreatePost mocks base method
func (m *MockDatastore) CreatePost(arg0 models.Post) error {
	ret := m.ctrl.Call(m, "CreatePost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockDatastoreMockRecorder) CreatePost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockDatastore)(nil).CreatePost), arg0)
}

// CreateUser mocks base method
func (m *MockDatastore) CreateUser(arg0 *models.User) error {
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockDatastoreMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatastore)(nil).CreateUser), arg0)
}

// CreateUserSession mocks base method
func (m *MockDatastore) CreateUserSession(arg0 *models.User) (models.UserSession, error) {
	ret := m.ctrl.Call(m, "CreateUserSession", arg0)
	ret0, _ := ret[0].(models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession
func (mr *MockDatastoreMockRecorder) CreateUserSession(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockDatastore)(nil).CreateUserSession), arg0)
}

// GetUserByEmailAndPassword mocks base method
func (m *MockDatastore) GetUserByEmailAndPassword(arg0, arg1 string) (models.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmailAndPassword", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailAndPassword indicates an expected call of GetUserByEmailAndPassword
func (mr *MockDatastoreMockRecorder) GetUserByEmailAndPassword(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailAndPassword", reflect.TypeOf((*MockDatastore)(nil).GetUserByEmailAndPassword), arg0, arg1)
}

// GetUserBySessionToken mocks base method
func (m *MockDatastore) GetUserBySessionToken(arg0 int, arg1 string) (models.User, error) {
	ret := m.ctrl.Call(m, "GetUserBySessionToken", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySessionToken indicates an expected call of GetUserBySessionToken
func (mr *MockDatastoreMockRecorder) GetUserBySessionToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySessionToken", reflect.TypeOf((*MockDatastore)(nil).GetUserBySessionToken), arg0, arg1)
}

// RemoveSessionToken mocks base method
func (m *MockDatastore) RemoveSessionToken(arg0 int, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveSessionToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSessionToken indicates an expected call of RemoveSessionToken
func (mr *MockDatastoreMockRecorder) RemoveSessionToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSessionToken", reflect.TypeOf((*MockDatastore)(nil).RemoveSessionToken), arg0, arg1)
}

// UserExists mocks base method
func (m *MockDatastore) UserExists(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "UserExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists
func (mr *MockDatastoreMockRecorder) UserExists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockDatastore)(nil).UserExists), arg0)
}
