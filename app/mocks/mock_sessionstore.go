// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandersmanning/simcha/app/sessions (interfaces: SessionStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/alexandersmanning/simcha/app/models"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockSessionStore is a mock of SessionStore interface
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// CurrentUser mocks base method
func (m *MockSessionStore) CurrentUser(arg0 models.Datastore, arg1 *http.Request) (*models.User, error) {
	ret := m.ctrl.Call(m, "CurrentUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUser indicates an expected call of CurrentUser
func (mr *MockSessionStoreMockRecorder) CurrentUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockSessionStore)(nil).CurrentUser), arg0, arg1)
}

// IsLoggedIn mocks base method
func (m *MockSessionStore) IsLoggedIn(arg0 models.Datastore, arg1 *http.Request) (bool, error) {
	ret := m.ctrl.Call(m, "IsLoggedIn", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoggedIn indicates an expected call of IsLoggedIn
func (mr *MockSessionStoreMockRecorder) IsLoggedIn(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoggedIn", reflect.TypeOf((*MockSessionStore)(nil).IsLoggedIn), arg0, arg1)
}

// Login mocks base method
func (m *MockSessionStore) Login(arg0 *models.User, arg1 http.ResponseWriter, arg2 *http.Request) error {
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockSessionStoreMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSessionStore)(nil).Login), arg0, arg1, arg2)
}

// Logout mocks base method
func (m *MockSessionStore) Logout(arg0 models.Datastore, arg1 http.ResponseWriter, arg2 *http.Request) error {
	ret := m.ctrl.Call(m, "Logout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockSessionStoreMockRecorder) Logout(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSessionStore)(nil).Logout), arg0, arg1, arg2)
}
